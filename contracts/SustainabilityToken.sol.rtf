{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // SPDX-License-Identifier: MIT\
pragma solidity ^0.8.0;\
\
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";\
import "@openzeppelin/contracts/access/Ownable.sol";\
\
contract SustainabilityToken is ERC20, Ownable \{\
    enum TokenType \{ Recycle, GreenEnergy, EcoMove \}\
\
    event TokenIssued(address indexed to, TokenType tokenType, uint256 amount);\
    event TokenRedeemed(address indexed user, TokenType tokenType, uint256 amount, string rewardItem);\
\
    constructor(string memory name, string memory symbol) ERC20(name, symbol) \{\}\
\
    // Mint tokens to user after validation\
    function issueToken(address to, TokenType tokenType, uint256 amount) external onlyOwner \{\
        _mint(to, amount);\
        emit TokenIssued(to, tokenType, amount);\
    \}\
\
    // Burn tokens when user redeems for rewards\
    function redeemToken(TokenType tokenType, uint256 amount, string memory rewardItem) external \{\
        require(balanceOf(msg.sender) >= amount, "Insufficient token balance");\
        _burn(msg.sender, amount);\
        emit TokenRedeemed(msg.sender, tokenType, amount, rewardItem);\
    \}\
\}\
}