{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 const \{ expect \} = require("chai");\
const \{ ethers \} = require("hardhat");\
\
describe("SustainabilityToken", function () \{\
  let Token, token, owner, user;\
\
  beforeEach(async function () \{\
    [owner, user] = await ethers.getSigners();\
    Token = await ethers.getContractFactory("SustainabilityToken");\
    token = await Token.deploy("Sustainability", "SUST");\
    await token.deployed();\
  \});\
\
  it("should mint tokens correctly", async function () \{\
    await token.issueToken(user.address, 0, 100); // RecycleToken\
    expect(await token.balanceOf(user.address)).to.equal(100);\
  \});\
\
  it("should emit TokenIssued event", async function () \{\
    await expect(token.issueToken(user.address, 1, 50))\
      .to.emit(token, "TokenIssued")\
      .withArgs(user.address, 1, 50); // GreenEnergyToken\
  \});\
\
  it("should allow redemption and emit TokenRedeemed", async function () \{\
    await token.issueToken(user.address, 2, 60); // EcoMoveToken\
    await token.connect(user).redeemToken(2, 20, "Water Bottle");\
    expect(await token.balanceOf(user.address)).to.equal(40);\
  \});\
\
  it("should revert if redeeming more than balance", async function () \{\
    await expect(token.connect(user).redeemToken(0, 10, "Tote Bag"))\
      .to.be.revertedWith("Insufficient balance");\
  \});\
\});\
}